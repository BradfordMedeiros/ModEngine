////////////
fragmentization:
for every cell in worldloading:
  fragments = splitvoxel(cell)  // select a voxel by some convention naming, not all voxels
  write fragments to correct new chunks or current chunk ]voxel_fragment:data/etc

for ever cell in worldloading
  join all fragments(cell)

//////////////
https://learnopengl.com/Advanced-OpenGL/Instancing
renderObject speed up (how can measure the time for this?)
///

next: offline tool for removing and object, adding a new object
- then just expose as guile script (for now?) a way to call rechunk (maybe it can just be an arg?)

then
probably split voxels again?
=> figure out how to resize voxel and join things right


what does it look like at the end:
?



- imposters? 
==> pick a scene to load, render it to a texture
==> or should this done with models (what about just a scenefile thing and then  it doesn't matter :)? )
load on a cool quad 
- just keep as a single fn for now probably (no reason to )
===> probably can use this code for cubemap generation?

would like:  
- make manipulator tool better


====================================


# ./build/modengine -w ./res/scenes/chunks.mapping -g 100 -i -r ./res/scenes/features/loading.p.rawscene

- start the voxel stuff
  ==> let's just pick a dimension, and then start building voxels, and have a neighbor voxel cell in another scene
  ==> build something cool i guess
  ==> then  add that structure to the voxel open world loading thing
  ==> then see if can do a resize functionality with the voxels
  ==> build build build?

==============================================================================



=> cannot scale a physics object with the manipulator tool thing
- tighten up exact on layouts (default bound info issue or something?)
end of october:
another pass at layout + try to create a basic ui
- mockup in photoshop to try to get a feel of the goal?
- until end of month
- create third person controller, make enemy animate, etc etc 

/////////////////////////

- detect ground via raycast


|           |
|           |
|  AND THEN |
|           |

GO HAM ON THE EDITOR -> VOXELS + TERRAIN
- worldloading:
- how to resize
  conceptually:
  calculate the position of each object 
  --> don't take into account parented objects b/c too confusing/ constrainty 
  --> calculate the position relative to the offset of the chunk, so pos = fn(obj_rel, chunk_index, chunk_size)
  --> solve for pos = fn(obj_rel_to_solve, chunk_index_new, chunk_size_new) such that obj_rel_to_solve < chunk_size_new
  ====> i guess?
  
- messaging for enemies and take damage
- navmesh generation based on voxel word (and generally?)
==> https://youtu.be/2mJZzU6-coo?t=1561 cool navmesh visualization

========================================================================
=> rm  guile since  want generalized bindings export
=> simplifies dependendenices, should be easier to port 

MAKE WORK IN DOCKER BUILD!!! + AUTOMATED BUILDS ON CI 
MAKE WORK ON WINDOWS!!!!
======================================================


MODEL_LOADING/ANIMATION
================
- initial model transform/rotation/scale (broken feature scenes) -> do I care?
=> model loading sets the coords slightly off, maybe scene sandbox issue?  too many conversion steps?  etc? 
=> parenting sandbox (querying can get out of data if using to read?)
- verify animation some
- make timeplayback stateless
- ability to set play speed, pause, etc time
- animation uses singular bone offsetmatrix to store values, this means can only play animation for one object

MISC/UNCATEGORIZED BUGS
========================
bug: ui has to be like ~ -z = 80, to render behind text, why come? Can this value be made something easy to understand?
bug: look into openal audio types, dont want to use big wav files
bug: initially loaded scripts have fake ids
bug: rotation is a 3 vec string attribute, should probably be a vec4 attribute
==> what is the proper behavior?
core loop:
=====> make all input events and state modifications happen before rendering


MISC IDEAS:
================
top level console that scrolls down from the top
==> how to implement scrollable text? ===>  MAYBE JUST DO FIXED SIZE AND SCRIPT FOR NOW
- get properties/recorder working properly (use case -> texture sprite playback)


OBJTYPES
===============================================
emitter upgrades: 
- maybe the delta stuff should be relative to the parent?  
- emitter -> sponsor float values

better voxels - editing
bugs:
- layout bound info gets centered, but the layout should be aligned from the left
- revisit layouts and try to get nice ui working for editor
layout bugs:
-> requires at least two passes (how many actuallly though?)
-> bounding box seems to be wrong still (try w/ text no work?)
-> should have a flex layout

- reimplement video and correctly
- painting seems to mismap the uvs


AI
======================================
- work on ai, make players and shit move and stuff enemy ai 
  - detection system: solved conceptually, but has parenting bugs 
  - integrate pathfinding: - eventually try to make navmesh's automatically somehow?
  - goal/destination system 
    - goals exist as things in a scene -> real objects with position
    - of the detected goals, each goal is evaluated with some utility value fn(actor, distance, goal) => number
    - do the goal that has the highest utility

SCENE SERIALIZATION
=======================
- merge serialize attr + getattr + include all attr
- attribute updating/serialization not kept in line
- better way to include scene code/prefabs 
- cannot attach arbitary attributes and get them back in gameobj-attr 
- serialization -> getAttributeValue and addFieldDynamic should be combined

INVERSE KINEMATICS/BONES AND PHYSICS
====================================
=> creates the way to do pinning / posing : <mainobjectname>/<rest_of_the_node>:position:5 5 5 (overrides the animation data)
=> attach physics objects to subobjects (via above mechanism) -> ragdolls
=> convex/exact hull kind of wrongish, sometimes hull would crash eh 


PERFORMANCE
===================
=> audit resources + profile memory in general
- clean up/speed up model loading
- be more consistent with setting shaders
- minimize opengl state changes (via sorting or maybe caching?)
- noticeable obvious performance drop for trivial stuff due to loading textures on demand (instead of preloading) (probably would also happen for audio, models)
- textures -> always convert to abs path so doesn't reuse
- culling
- add debug times for major conceptual areas (bloom time, portal rendering time, etc)

RENDERING
======================
=====> cleanup core rendering code, think about how buffers are used, fix bloom etc
- bloom doesn't do depth test correctly


USABILITY
=============
- overlay files that can be combined into a scene -> a layer basically -
- use "-" prefix in file to reverse the effect of the value 
  => -gameobj:position       <- subtracts any position value
  => -gameobj:position:5 2 1 <- subtracts only that value
- improve manipulator
- console.scm can switch scope into modules

==[plugins]==

SEQUENCER
=================
-  improve state machine attrs (not super important yet but needed when get more involved w/ scripting
  - attr function (i guess it affects the associated object?) - bugs with memory management for tracks / onexit fns
- ability to have user defined attributes

SQL BUGS
=================
- no way to escape strings 
- create easy way to safely bind strings 
select name, modelpath, fire-animation from guns where name = " gunname  ==> gunname should require quotes, but requires they have no quotes instead


SCRIPTING -> migrate to C/++ api so lots of this irrelevant now
================
- generalize scripting interface to call into generalized c api\
- guile should print a stacktrace
- consider when the script should be loaded.
  -> scene/addSerialObjectsToWorld:453 -> that load script can remove object from the list
  -> bug: onMessage tries to remove itself from script, doesn't work
    guile: uncaught throw to wrong-type-arg: (set-current-module Wrong type argument in position ~A (expecting ~A): ~S (1 module (((((((Segmentation fault (core dumped)
- make manipulator into a script instead?

- ability to auto reload script when notice a change (probably rate limit?)
=> way to globally address obj by name -> maybe <sceneid>:objname? ? 
(set-scene-name "coolname")
(lsobj-name "someobject" "coolname")

currentModuleId -> is flawed
guile -> for out how to catch any exception, then be smart about stuff

MIGHT NOT BE BUGS BUT LOOKOUT FOR
=========================
- make everything time independent
- playclip rm &jumpsound doesn't error but rm &gunsound does error when play null clip
scenebox positioning and stuff like that
- verify setfrontdelta does what i think it does
bug: makeobjattr caused &jump-sound is outside of the scene (huh?)


BORDERLINE
==============
- if object is added but belongs to no layer, probably should have some warning? 
- could get input at fps independent of rendering (same for physics)
==> get input handling in order.
// draw-line can't work unless called during specific handlers


COOL BUT NOT YET
=================

RENDERING
========================
deferred rendering mode
render mode: visualize different values for deferred rendering 
=> per layer?  Should still allow forward rendering eg for opacity
ambient occulusion
normal mapping
pbr
fix shadows


PHYSICS
=========
ropes/chains
joints
buyancy
etc

WATER?
========


SANDBOX
==============
-addObjectToCache requires all elements to belong to a layer, if not exception
-> ability to apply any texture as a final framebuffer (for eg, a hud that can have more stability...)

SOUND
================
- create silent option to just mute all sounds (or set volume?)

OTHER
=============
PLAY VS EDIT MODES IN EDITOR? 
==> what does this really mean? 
=> probably attrs have current value vs starting value

random ideas:
be able to address things in the scenegraph like a filesystem "../path/to/node/../whatever"

* scale the guns to something reasonable, then polish up some guns
guns - bloom as fn of shooting time:
angle = (random theta) 
d = (random max diameter)  fn(time to recover, (bloom per shot) ^ 2 bloom per shot, max bloom)  <- linear , maybe inst
x = d * cos(angle)
y = d * cos(angle)

make blur better (guassian, better handling of sampling stuff), camera aperature etc