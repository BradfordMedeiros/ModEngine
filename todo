

bug: parenting doesn't work when physics are enabled
bug: ui has to be like ~ -z = 80, to render behind text, why come? Can this value be made something easy to understand?
bug: look into openal audio types, dont want to use big wav files
bug: initially loaded scripts have fake ids, define mainobjs that don't actually exist

- get the basic guns working (restore previous behavior)

==================
GAME SPECIFIC
==================
third person toggle (just some basic character that can run around and stuff)

improve gun system
- xoffset, yoffset as percentage of the screen)
- fixed field of view to handle fov better (need core engine layer system to always render this on top I guess?)
- hud ui element better sizing and shit


- improve movement system  (very tunable)
  - maybe write custom controller and don't rely on the basic physics body stuff?
  - movement speed
  - gravity
  - tilt
  - landing sound effect
  - sprint 
  - limit vertical

core gameplay implementation stage:
- emitter initial velocity 
- gun system (very tunable) : projectile effect (on muzzle?)

============== GOAL END OF SEPTEMBER ==================================
Note: I don't think the movement has to feel perfect, or even that good yet
but is important that the main functional aspects are defined

========================================================================

|            |
|           |
|  AND THEN |
|           |

GO HAM ON THE EDITOR -> VOXELS + TERRAIN
- worldloading:
- how to resize
  conceptually:
  calculate the position of each object 
  --> don't take into account parented objects b/c too confusing/ constrainty 
  --> calculate the position relative to the offset of the chunk, so pos = fn(obj_rel, chunk_index, chunk_size)
  --> solve for pos = fn(obj_rel_to_solve, chunk_index_new, chunk_size_new) such that obj_rel_to_solve < chunk_size_new
  ====> i guess?
  



========================================================================
MAKE WORK IN DOCKER BUILD!!! + AUTOMATED BUILDS ON CI 
MAKE WORK ON WINDOWS!!!!
======================================================
============== GOAL END OF SEPTEMBER ==================================



FIXING BUGS
========================
- initial model transform/rotation/scale (broken feature scenes) -> do I care?
- skybox sometimes doesn't render if -i is not used
=====> cleanup core rendering code, think about how buffers are used, fix bloom etc

=> model loading sets the coords slightly off, maybe scene sandbox issue?  too many conversion steps?  etc? 
=> parenting sandbox (querying can get out of data if using to read?)
=> fix when get local position and update vs the new value in the cache
- make timeplayback stateless 
- animation interpolation
- verify animation some
- fix dae/fbx models in model loading (convert all to gltf maybe?) + cleanup unused models/files

=> way to globally address obj by name -> maybe <sceneid>:objname? ? 
(set-scene-name "coolname")
(lsobj-name "someobject" "coolname")

currentModuleId -> is flawed
guile -> for out how to catch any exception, then be smart about stuff
textures -> always convert to abs path so doesn't reuse

-> merge serialize attr + getattr + include all attr

- revisit layouts and try to get nice ui working for editor
layout bugs:
-> requires at least two passes (how many actuallly though?)
-> bounding box seems to be wrong still (try w/ text no work?)
-> should have a flex layout

ui ideas:
================
top level console that scrolls down from the top
==> how to implement scrollable text? ===>  MAYBE JUST DO FIXED SIZE AND SCRIPT FOR NOW
- get properties/recorder working properly (use case -> texture sprite playback)


===========================================

- better voxels
  - better editing
  - destruction?


===============================================
emitter upgrades: 
- maybe the delta stuff should be relative to the parent?  
and thenfore solve: - enemy should then start shooting projectiles at the player

bugs:
- tilt thing for movement not working great
- make everything time independent
=> convex/exact hull kind of wrongish, sometimes hull would crash eh 
- layout bound info gets centered, but the layout should be aligned from the left
- video no longer work wtf shit
- painting seems to mismap the uvs

eventually:
- work on ai, make players and shit move and stuff enemy ai 
  - detection system: solved conceptually, but has parenting bugs 
  - integrate pathfinding: - eventually try to make navmesh's automatically somehow?
  - goal/destination system 
    - goals exist as things in a scene -> real objects with position
    - of the detected goals, each goal is evaluated with some utility value fn(actor, distance, goal) => number
    - do the goal that has the highest utility
- better way to include scene code/prefabs 

bugs for eventually:
========> be more consistent with setting shaders


- physics raycast is gets a collision object that does not a rigidbody in the map
- playclip rm &jumpsound doesn't error but rm &gunsound does error when play null clip
- attribute updating/serialization not kept in line
- consider when the script should be loaded.
  - ran into unloading issue during scene loading since can remove object, code assumes no object has been removed during loading:
  - scene/addSerialObjectsToWorld:453 -> that load script can remove object from the list

features for eventually:
- [plugin] improve state machine attrs (not super important yet but needed when get more involved w/ scripting
  - attr function (i guess it affects the associated object?) - bugs with memory management for tracks / onexit fns
- ability to have user defined attributes

- guile should print a stacktrace
- console.scm can switch scope into modules

========================================================

  => creates the way to do pinning : <mainobjectname>/<rest_of_the_node>:position:5 5 5 (overrides the animation data)
      ==> WOULD ALLOW FOR POSING 

easy use ideas:
- nice graphic
- for rotation
- clean up/speed up model loading (every reference requires reading the file, even if it could be cached)


=> audit resources + profile memory in general
