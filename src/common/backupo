#include "./watch_file.h"


// verify if directory or just file 

#include <sys/select.h>

void MonitorFileChanges(const std::string& filePath) {
    int inotifyFd = inotify_init();
    if (inotifyFd == -1) {
        return;
    }

    int watchDescriptor = inotify_add_watch(inotifyFd, filePath.c_str(), IN_MODIFY);
    if (watchDescriptor == -1) {
        close(inotifyFd);
        return;
    }

    // Prepare the file descriptor set for select
    fd_set fds;
    FD_ZERO(&fds);
    FD_SET(inotifyFd, &fds);
    int maxFd = inotifyFd;

    while (true) {
        // Wait for events using select
        int numReady = select(maxFd + 1, &fds, nullptr, nullptr, nullptr);
        if (numReady == -1) {
            break;
        }

        if (FD_ISSET(inotifyFd, &fds)) {
            // Read and process inotify events
            constexpr int bufferSize = 4096;
            char buffer[bufferSize];

            ssize_t bytesRead = read(inotifyFd, buffer, bufferSize);
            if (bytesRead == -1) {
                break;
            }

            char* ptr = buffer;
            while (ptr < buffer + bytesRead) {
                inotify_event* event = reinterpret_cast<inotify_event*>(ptr);

                if (event->wd == watchDescriptor && (event->mask & IN_MODIFY)) {
                    std::cout << "File modified: " << event->name << std::endl;
                }

                ptr += sizeof(inotify_event) + event->len;
            }
        }
    }

    inotify_rm_watch(inotifyFd, watchDescriptor);
    close(inotifyFd);
}


void watchFiles(std::string directory, float debouncePeriodSeconds){
	if (directory == ""){
		return;
	}
  std::filesystem::path filePath(directory);

  modassert(std::filesystem::exists(filePath), std::string("filesystem: file does not exist: " + directory));
  bool isDirectory = std::filesystem::is_directory(filePath);
  modassert(isDirectory, "filewatch must be directory");
	modlog("file watch", "initialized watch files");

	static int fd = inotify_init();
	modassert(fd != -1, "failure initializing watch files");

  char buffer[4096]; // idk 4096 seems fine i guess? 

  int watchDescriptor = inotify_add_watch(fd, directory.c_str(), IN_ATTRIB | IN_MODIFY);
  modlog("file watch", std::string("added watch on ") + std::filesystem::canonical(filePath).string());

  std::set<std::string> modifiedFiles = {};
  while(true){
    modlog("file watch", "Checking watch files read buffer start");
  	ssize_t bytesRead = read(fd, buffer, sizeof(buffer));
    modlog("file watch", "Checking watch files read complete");
  	modassert(bytesRead != -1, "could not read inotify_init events");
    for (char* ptr = buffer; ptr < buffer + bytesRead;){
      inotify_event* event = reinterpret_cast<inotify_event*>(ptr);
      if (event -> len > 0 && std::string(event -> name).size()){
        modifiedFiles.insert(event -> name);
      }
      ptr += sizeof(inotify_event) + event -> len;
    }
  }
	close(fd);
}

   
std::set<std::string> pollChangedFiles(){
	return { "one.png" , "one.mp3" };
}