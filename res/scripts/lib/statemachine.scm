(use-modules (srfi srfi-1) (srfi srfi-13))

(define (add-path machine first-key second-key value)
	(if (equal? (hash-ref machine first-key) #f)
		(hash-set! machine first-key (make-hash-table)) 
	)
	(let* ((transition-to-state-map (hash-ref machine first-key)) (second-key-value (hash-ref transition-to-state-map second-key)))
		(if (and (not (equal? second-key-value #f)) (not(equal? second-key-value value)))
			(throw 'duplicate-transition-different-to-state-error)
		)
		(hash-set! transition-to-state-map second-key value)
	)
)
(define (get-state-at-transition machine from-state transition)
	(if (equal? (hash-ref machine from-state) #f)
		(throw 'from-state-does-not-exist)
	)
	(hash-ref (hash-ref machine from-state) transition)
)
(define (create-state machine from-state to-state transition)	
	(add-path machine from-state transition to-state)
)
(define machine (make-hash-table))
(define transitionCallbacks (make-hash-table))

(define-syntax ::
	(syntax-rules(: - > query |) 
		((:: | transition - callback) (display "yay"))
		((:: from-state -> to-state) (create-state machine from-state to-state 'default))
		((:: from-state -> to-state | transition) (create-state machine from-state to-state transition))
		((:: from-state -> to-state | transition - callback) (create-state machine from-state to-state transition))
		((:: query from-state | transition) (get-state-at-transition machine from-state transition))
		((:: query from-state) (:: query from-state : 'default))
	)
)


(define (somefunc)
	(display "somefunc called")
)
(:: 'water -> 'ice )
(:: 'ice   -> 'water)
(:: 'water -> 'vapor | 'evaporate - kfkfkfkfkf)
(:: | 'evaporate - somefunc)